{"version":3,"sources":["webpack:///./src/pages/docs/different-locales.js"],"names":["myCustomLocale","months","weekDays","weekStartingIndex","getToday","gregorainTodayObject","toNativeDate","date","Date","year","month","day","getMonthLength","getDate","transformDigit","digit","nextMonth","previousMonth","openMonthSelector","openYearSelector","closeMonthSelector","closeYearSelector","from","to","defaultPlaceholder","digitSeparator","yearLetterSkip","isRtl","DefaultValues","useState","datePicker1Value","setDatePicker1Value","datePicker2Value","setDatePicker2Value","title","className","language","calendarClassName","wrapperClassName","value","onChange","locale","shouldHighlightWeekends"],"mappings":"2FAAA,6EAMMA,EAAiB,CACrBC,OAAQ,CACN,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEFC,SAAU,CACR,SACA,SACA,UACA,YACA,WACA,SACA,YAEFC,kBAAmB,EACnBC,SAzBqB,SAyBZC,GACP,OAAOA,GAETC,aA5BqB,SA4BRC,GACX,OAAO,IAAIC,KAAKD,EAAKE,KAAMF,EAAKG,MAAQ,EAAGH,EAAKI,MAElDC,eA/BqB,SA+BNL,GACb,OAAO,IAAIC,KAAKD,EAAKE,KAAMF,EAAKG,MAAO,GAAGG,WAE5CC,eAlCqB,SAkCNC,GACb,OAAOA,GAETC,UAAW,aACXC,cAAe,iBACfC,kBAAmB,sBACnBC,iBAAkB,qBAClBC,mBAAoB,uBACpBC,kBAAmB,sBACnBC,KAAM,OACNC,GAAI,KACJC,mBAAoB,YACpBC,eAAgB,IAChBC,eAAgB,EAChBC,OAAO,GA0MMC,UAvMO,WAAO,IAAD,EACsBC,mBAAS,MAAlDC,EADmB,KACDC,EADC,OAEsBF,mBAAS,MAAlDG,EAFmB,KAEDC,EAFC,KAI1B,OACE,kBAAC,IAAD,CAAMC,MAAM,qBACV,kHAEe,0BAAMC,UAAU,eAAhB,UAFf,sGAMA,wBAAIA,UAAU,wBAAd,4BACA,wEAC6C,IAC3C,0BAAMA,UAAU,eAAhB,MAFF,OAE8C,IAC5C,0BAAMA,UAAU,eAAhB,MAHF,yCAIU,0BAAMA,UAAU,eAAhB,UAJV,sBAMA,yBAAKA,UAAU,yBACb,kBAAC,IAAD,CAAMC,SAAS,cAAf,ucAsBA,kBAAC,IAAD,CACEC,kBAAkB,sBAClBC,iBAAiB,uBACjBC,MAAOT,EACPU,SAAUT,EACVU,OAAO,KACPC,yBAAuB,KAG3B,yBAAKP,UAAU,yBACb,kBAAC,IAAD,CAAMC,SAAS,cAAf,6cAsBA,kBAAC,WAAD,CACEC,kBAAkB,2CAClBE,MAAOP,EACPQ,SAAUP,EACVQ,OAAO,KACPC,yBAAuB,KAG3B,wBAAIP,UAAU,wBAAd,wBACA,+IAE8C,IAC5C,0BAAMA,UAAU,eAAhB,UAHF,+DAMA,yBAAKA,UAAU,yBACb,kBAAC,IAAD,CAAMC,SAAS,cAAf,4iEAiGA,kBAAC,WAAD,CACEC,kBAAkB,sBAClBE,MAAOP,EACPQ,SAAUP,EACVQ,OAAQzC,EACR0C,yBAAuB","file":"component---src-pages-docs-different-locales-js-1c0c9e290606883ec0fc.js","sourcesContent":["import React, { useState } from 'react';\nimport DatePicker, { Calendar } from 'react-modern-calendar-datepicker';\n\nimport Docs from '../../containers/docs';\nimport { Code } from '../../components';\n\nconst myCustomLocale = {\n  months: [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ],\n  weekDays: [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ],\n  weekStartingIndex: 0,\n  getToday(gregorainTodayObject) {\n    return gregorainTodayObject;\n  },\n  toNativeDate(date) {\n    return new Date(date.year, date.month - 1, date.day);\n  },\n  getMonthLength(date) {\n    return new Date(date.year, date.month, 0).getDate();\n  },\n  transformDigit(digit) {\n    return digit;\n  },\n  nextMonth: 'Next Month',\n  previousMonth: 'Previous Month',\n  openMonthSelector: 'Open Month Selector',\n  openYearSelector: 'Open Year Selector',\n  closeMonthSelector: 'Close Month Selector',\n  closeYearSelector: 'Close Year Selector',\n  from: 'from',\n  to: 'to',\n  defaultPlaceholder: 'Select...',\n  digitSeparator: ',',\n  yearLetterSkip: 0,\n  isRtl: false,\n};\n\nconst DefaultValues = () => {\n  const [datePicker1Value, setDatePicker1Value] = useState(null);\n  const [datePicker2Value, setDatePicker2Value] = useState(null);\n\n  return (\n    <Docs title=\"Different Locales\">\n      <p>\n        Turning this date picker into another locale date picker is as easy as\n        changing the <code className=\"custom-code\">locale</code> prop. For other\n        features like minimum and maximum dates, just use them as you would\n        normally use:\n      </p>\n      <h2 className=\"Docs__titleSecondary\">Using Predefined Locales</h2>\n      <p>\n        For now, there are two predefined locales;{' '}\n        <code className=\"custom-code\">en</code> and{' '}\n        <code className=\"custom-code\">fa</code>. You can use them by passing\n        them to <code className=\"custom-code\">locale</code> prop as a string.\n      </p>\n      <div className=\"Docs__sampleContainer\">\n        <Code language=\"javascript\">\n          {`\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport DatePicker from \"react-modern-calendar-datepicker\";\n\nconst App = () => {\n  const [selectedDay, setSelectedDay] = useState(null);\n  return (\n    <DatePicker\n      value={selectedDay}\n      onChange={setSelectedDay}\n      shouldHighlightWeekends\n      locale=\"fa\" // add this\n    />\n  );\n};\n\nexport default App;\n\n          `}\n        </Code>\n        <DatePicker\n          calendarClassName=\"responsive-calendar\"\n          wrapperClassName=\"fontWrapper -persian\"\n          value={datePicker1Value}\n          onChange={setDatePicker1Value}\n          locale=\"fa\"\n          shouldHighlightWeekends\n        />\n      </div>\n      <div className=\"Docs__sampleContainer\">\n        <Code language=\"javascript\">\n          {`\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport { Calendar } from \"react-modern-calendar-datepicker\";\n\nconst App = () => {\n  const [selectedDay, setSelectedDay] = useState(null);\n  return (\n    <Calendar\n      value={selectedDay}\n      onChange={setSelectedDay}\n      shouldHighlightWeekends\n      locale=\"fa\" // add this\n    />\n  );\n};\n\nexport default App;\n\n                `}\n        </Code>\n        <Calendar\n          calendarClassName=\"fontWrapper -persian responsive-calendar\"\n          value={datePicker2Value}\n          onChange={setDatePicker2Value}\n          locale=\"fa\"\n          shouldHighlightWeekends\n        />\n      </div>\n      <h2 className=\"Docs__titleSecondary\">Using Custom Locales</h2>\n      <p>\n        If your locale is missing in predefined locales, you can add your own\n        custom locale by passing a locale object to{' '}\n        <code className=\"custom-code\">locale</code> prop. This is an example of\n        default English picker&#39;s data:\n      </p>\n      <div className=\"Docs__sampleContainer\">\n        <Code language=\"javascript\">\n          {`\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport { Calendar } from \"react-modern-calendar-datepicker\";\n\nconst myCustomLocale = {\n  // months list by order\n  months: [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n  ],\n\n  // week days by order\n  weekDays: [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ],\n\n  // just play around with this number between 0 and 6\n  weekStartingIndex: 0,\n\n  // return a { year: number, month: number, day: number } object\n  getToday(gregorainTodayObject) {\n    return gregorainTodayObject;\n  },\n\n  // return a native JavaScript date here\n  toNativeDate(date) {\n    return new Date(date.year, date.month - 1, date.day);\n  },\n\n  // return a number for date's month length\n  getMonthLength(date) {\n    return new Date(date.year, date.month, 0).getDate();\n  },\n\n  // return a transformed digit to your locale\n  transformDigit(digit) {\n    return digit;\n  },\n\n  // texts in the date picker\n  nextMonth: 'Next Month',\n  previousMonth: 'Previous Month',\n  openMonthSelector: 'Open Month Selector',\n  openYearSelector: 'Open Year Selector',\n  closeMonthSelector: 'Close Month Selector',\n  closeYearSelector: 'Close Year Selector',\n  defaultPlaceholder: 'Select...',\n\n  // for input range value\n  from: 'from',\n  to: 'to',\n\n\n  // used for input value when multi dates are selected\n  digitSeparator: ',',\n\n  // if your provide -2 for example, year will be 2 digited\n  yearLetterSkip: 0,\n\n  // is your language rtl or ltr?\n  isRtl: false,\n}\n\nconst App = () => {\n  const [selectedDay, setSelectedDay] = useState(null);\n  return (\n    <Calendar\n      value={selectedDay}\n      onChange={setSelectedDay}\n      locale={myCustomLocale} // custom locale object\n      shouldHighlightWeekends\n    />\n  );\n};\n\nexport default App;\n\n                      `}\n        </Code>\n        <Calendar\n          calendarClassName=\"responsive-calendar\"\n          value={datePicker2Value}\n          onChange={setDatePicker2Value}\n          locale={myCustomLocale}\n          shouldHighlightWeekends\n        />\n      </div>\n    </Docs>\n  );\n};\n\nexport default DefaultValues;\n"],"sourceRoot":""}