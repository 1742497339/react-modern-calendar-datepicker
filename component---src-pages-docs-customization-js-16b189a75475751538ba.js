(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"4w9p":function(e,a,n){"use strict";n.r(a);var t=n("q1tI"),r=n.n(t),o=n("Wbzz"),l=n("72SN"),s=n.n(l),c=n("dgKS"),d=n("Kvkj"),m=(n("91GP"),function(){var e=Math.floor(10*Math.random())+9,a=Object(l.utils)().getToday(),n=e===a.day||e===a.day+1?a.day+2:e;return Object.assign({},a,{day:n})});a.default=function(){var e=Object(t.useState)(null),a=e[0],n=e[1],i=Object(t.useState)(null),u=i[0],p=i[1],y=Object(t.useState)({from:{year:2019,month:4,day:16},to:{year:2019,month:4,day:19}}),h=y[0],f=y[1],g=m(),b=m(),D=Object(t.useState)(g),C=D[0],S=D[1],v=Object(t.useState)(b),E=v[0],k=v[1],N=Object(t.useState)({year:2019,month:3,day:1}),w=N[0],x=N[1];return r.a.createElement(c.a,{title:"Customization"},r.a.createElement("p",null,"This package is designed to be customizable. There are a couple of props to change the default styles according to your preferences. You can customize picker, calendar, and input. For the full list of available props, you can visit"," ",r.a.createElement(o.a,{className:"Docs__link",to:"/docs/props-list"},"props list"),"."),r.a.createElement("h2",{className:"Docs__titleSecondary"},"Customized Input"),r.a.createElement("p",null,"Placeholder and the formatted value of input can be set directly by you. Moreover, you can set an additional class on the input. If that's not enough, you can render your own input as well. Let's take a look at a few examples:"),r.a.createElement("div",{className:"Docs__sampleContainer"},r.a.createElement(d.a,{language:"javascript"},'\nimport React, { useState } from "react";\nimport "react-modern-calendar-datepicker/lib/DatePicker.css";\nimport DatePicker from "react-modern-calendar-datepicker";\n\nconst App = () => {\n  const [selectedDay, setSelectedDay] = useState(null);\n\n  const formatInputValue = () => {\n    if (!selectedDay) return \'\';\n    return `Day: ${selectedDay.day}`;\n  };\n\n  return (\n    <DatePicker\n      value={selectedDay}\n      onChange={setSelectedDay}\n      inputPlaceholder="Select a date" // placeholder\n      formatInputText={formatInputValue} // format value\n      inputClassName="my-custom-input" // custom class\n      shouldHighlightWeekends\n    />\n  );\n};\n\nexport default App;\n\n          '),r.a.createElement(s.a,{wrapperClassName:"fontWrapper -aboveAll",calendarClassName:"fontWrapper",value:a,onChange:n,inputPlaceholder:"Select a date",formatInputText:function(){return a?"Day: "+a.day:""},shouldHighlightWeekends:!0})),r.a.createElement("p",null,"You can render your own custom input using"," ",r.a.createElement("code",{className:"custom-code"},"renderInput")," prop:"),r.a.createElement("div",{className:"Docs__sampleContainer"},r.a.createElement(d.a,{language:"javascript"},"\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport DatePicker from \"react-modern-calendar-datepicker\";\n\nconst App = () => {\n  const [selectedDay, setSelectedDay] = useState(null);\n\n  // render regular HTML input element\n  const renderCustomInput = ({ ref }) => (\n    <input\n      readOnly\n      ref={ref} // necessary\n      placeholder=\"I'm a custom input\"\n      value={selectedDay ? `✅: ${selectedDay.day}` : ''}\n      style={{\n        textAlign: 'center',\n        padding: '1rem 1.5rem',\n        fontSize: '1.5rem',\n        border: '1px solid #9c88ff',\n        borderRadius: '100px',\n        boxShadow: '0 1.5rem 2rem rgba(156, 136, 255, 0.2)',\n        color: '#9c88ff',\n        outline: 'none',\n      }}\n      className=\"my-custom-input-class\" // a styling class\n    />\n  )\n\n  return (\n    <DatePicker\n      value={selectedDay}\n      onChange={setSelectedDay}\n      renderInput={renderCustomInput} // render a custom input\n      shouldHighlightWeekends\n    />\n  );\n};\n\nexport default App;\n\n          "),r.a.createElement(s.a,{wrapperClassName:"fontWrapper",calendarClassName:"fontWrapper",value:u,onChange:p,shouldHighlightWeekends:!0,renderInput:function(e){var a=e.ref;return r.a.createElement("input",{readOnly:!0,ref:a,placeholder:"I'm a custom input",className:"-customPlaceholderColor",value:u?"✅: "+u.day:"",style:{textAlign:"center",padding:"1rem 1.5rem",fontSize:"1.5rem",border:"1px solid #9c88ff",borderRadius:"100px",boxShadow:"0 1.5rem 2rem rgba(156, 136, 255, 0.2)",color:"#9c88ff",outline:"none"}})}})),r.a.createElement("h2",{className:"Docs__titleSecondary"},"Customized Calendar"),r.a.createElement("p",null,"The calendar has a few more props for customization. The most basic ones are ",r.a.createElement("code",{className:"custom-code"},"colorPrimary"),","," ",r.a.createElement("code",{className:"custom-code"},"colorPrimaryLight"),". Additional classes' props are available for the calendar itself, selected day, disabled days, range start day, range end day, and more. Here are some examples:"),r.a.createElement("div",{className:"Docs__sampleContainer"},r.a.createElement(d.a,{language:"javascript"},'\nimport React, { useState } from "react";\nimport "react-modern-calendar-datepicker/lib/DatePicker.css";\nimport { Calendar } from "react-modern-calendar-datepicker";\n\nconst App = () => {\n  const defaultFrom = {\n    year: 2019,\n    month: 4,\n    day: 16,\n  };\n  const defaultTo = {\n    year: 2019,\n    month: 4,\n    day: 19,\n  };\n  const defaultValue = {\n    from: defaultFrom,\n    to: defaultTo,\n  };\n  const [selectedDayRange, setSelectedDayRange] = useState(\n    defaultValue\n  );\n\n  return (\n    <Calendar\n      value={selectedDayRange}\n      onChange={setSelectedDayRange}\n      colorPrimary="#0fbcf9" // added this\n      colorPrimaryLight="rgba(75, 207, 250, 0.4)" // and this\n      shouldHighlightWeekends\n    />\n  );\n};\n\nexport default App;\n\n          '),r.a.createElement(l.Calendar,{calendarClassName:"fontWrapper",value:h,onChange:f,colorPrimary:"#0fbcf9",colorPrimaryLight:"rgba(75, 207, 250, 0.4)",shouldHighlightWeekends:!0})),r.a.createElement("div",{className:"Docs__sampleContainer"},r.a.createElement(d.a,{language:"javascript"},'\nimport React, { useState } from "react";\nimport "react-modern-calendar-datepicker/lib/DatePicker.css";\nimport { Calendar } from "react-modern-calendar-datepicker";\n\nconst App = () => {\n  const defaultValue = {\n    year: '+g.year+",\n    month: "+g.month+",\n    day: "+g.day+',\n  };\n  const [selectedDay, setSelectedDay] = useState(defaultValue);\n\n  return (\n    <Calendar\n      value={selectedDay}\n      onChange={setSelectedDay}\n      colorPrimary="#9c88ff" // added this\n      calendarClassName="custom-calendar" // and this\n      calendarTodayClassName="custom-today-day" // also this\n      shouldHighlightWeekends\n    />\n  );\n};\n\nexport default App;\n\n          '),r.a.createElement(l.Calendar,{calendarClassName:"fontWrapper purple-shadow",value:C,onChange:S,colorPrimary:"#9c88ff",calendarTodayClassName:"text-orange",shouldHighlightWeekends:!0})),r.a.createElement("p",null,"Our CSS code for the above example is:"),r.a.createElement(d.a,{language:"css"},"\n.custom-calendar {\n  box-shadow: 0 1em 3em rgba(156, 136, 255,0.2);\n}\n\n.custom-today-day {\n  color: #e67e22 !important;\n  border: 1px solid #e67e22 !important;\n}\n\n.custom-today-day::after {\n  visibility: hidden; /* hide small border under the text */\n}\n        "),r.a.createElement("p",null,r.a.createElement("strong",null,"Note:")," the usage of"," ",r.a.createElement("code",{className:"custom-code"},"!important")," is because of"," ",r.a.createElement("a",{rel:"noopener noreferrer",target:"_blank",className:"Docs__link",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity"},"overriding the default styles"),"."),r.a.createElement("h2",{className:"Docs__titleSecondary"},"Customized Array of Days"),r.a.createElement("p",null,"If any of the above customizable options for days is not enough for you, you can provide an array for some days to have a certain CSS class:"),r.a.createElement("div",{className:"Docs__sampleContainer"},r.a.createElement(d.a,{language:"javascript"},"\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport { Calendar } from \"react-modern-calendar-datepicker\";\n\nconst App = () => {\n  const defaultValue = {\n    year: 2019,\n    month: 3,\n    day: 1,\n  };\n  const [selectedDay, setSelectedDay] = useState(defaultValue);\n\n  return (\n    <Calendar\n      value={selectedDay}\n      onChange={setSelectedDay}\n      shouldHighlightWeekends\n      customDaysClassName={[\n        // here we add some CSS classes\n        { year: 2019, month: 3, day: 4, className: 'purpleDay' },\n        { year: 2019, month: 3, day: 12, className: 'orangeDay' },\n        { year: 2019, month: 3, day: 18, className: 'yellowDay' },\n        { year: 2019, month: 3, day: 26, className: 'navyBlueDay' },\n      ]}\n    />\n  );\n};\n\nexport default App;\n\n          "),r.a.createElement(l.Calendar,{calendarClassName:"fontWrapper",value:w,onChange:x,shouldHighlightWeekends:!0,customDaysClassName:[{year:2019,month:3,day:4,className:"purpleDay"},{year:2019,month:3,day:12,className:"orangeDay"},{year:2019,month:3,day:18,className:"yellowDay"},{year:2019,month:3,day:26,className:"navyBlueDay"}]})),r.a.createElement("p",null,"Our CSS code for the above example is:"),r.a.createElement(d.a,{language:"css"},"\n/*\n  These :not() selectors are for preventing\n  style conflicts with a selected date. You can remove them if you wish!\n*/\n\n.purpleDay:not(.-selectedStart):not(.-selectedBetween):not(.-selectedEnd):not(.-selected) {\n  border: 2px solid rgba(156, 136, 255, 0.7) !important;\n}\n\n.orangeDay:not(.-selectedStart):not(.-selectedBetween):not(.-selectedEnd):not(.-selected) {\n  border: 2px solid rgba(219, 145, 60, 0.7) !important;\n}\n\n.yellowDay:not(.-selectedStart):not(.-selectedBetween):not(.-selectedEnd):not(.-selected) {\n  border: 2px solid rgba(228, 231, 36, 0.7) !important;\n}\n\n.navyBlueDay:not(.-selectedStart):not(.-selectedBetween):not(.-selectedEnd):not(.-selected) {\n  border: 2px solid rgba(52, 73, 94, 0.7) !important;\n}\n        "),r.a.createElement("h2",{className:"Docs__titleSecondary"},"Calendar Footer"),r.a.createElement("p",null,"You can render a custom footer in the calendar below the days list by"," ",r.a.createElement("code",{className:"custom-code"},"renderFooter")," prop. This can be useful for rendering a button for selecting today or reseting the value. This is an example:"),r.a.createElement("div",{className:"Docs__sampleContainer"},r.a.createElement(d.a,{language:"javascript"},'\nimport React, { useState } from "react";\nimport "react-modern-calendar-datepicker/lib/DatePicker.css";\nimport { Calendar } from "react-modern-calendar-datepicker";\n\nconst App = () => {\n  const defaultValue = {\n    year: '+b.year+",\n    month: "+b.month+",\n    day: "+b.day+",\n  };\n  const [selectedDay, setSelectedDay] = useState(defaultValue);\n\n  return (\n    <Calendar\n      value={selectedDay}\n      onChange={setSelectedDay}\n      shouldHighlightWeekends\n      // here we go\n      renderFooter={() => (\n        <div style={{ display: 'flex', justifyContent: 'center', padding: '1rem 2rem' }}>\n          <button\n            type=\"button\"\n            onClick={() => {\n              setSelectedDay(null)\n            }}\n            style={{\n              border: '#0fbcf9',\n              color: '#fff',\n              borderRadius: '0.5rem',\n              padding: '1rem 2rem',\n            }}\n          >\n            Reset Value!\n          </button>\n        </div>\n      )}\n    />\n  );\n};\n\nexport default App;\n\n          "),r.a.createElement(l.Calendar,{calendarClassName:"fontWrapper",value:E,onChange:k,shouldHighlightWeekends:!0,renderFooter:function(){return r.a.createElement("div",{style:{display:"flex",justifyContent:"center",padding:"1rem 2rem"}},r.a.createElement("button",{type:"button",onClick:function(){k(null)},style:{background:"#0fbcf9",color:"#fff",borderRadius:"0.5rem",padding:"1rem 2rem"}},"Reset Value!"))}})),r.a.createElement("h2",{className:"Docs__titleSecondary"},"Customized Wrapper"),r.a.createElement("p",null,"All the calendar custom styling props can be passed from"," ",r.a.createElement("code",{className:"custom-code"},"<DatePicker />"),". Furthermore, there's a",r.a.createElement("code",{className:"custom-code"},"wrapperClassName")," prop for the customization of the picker's container element itself."))}}}]);
//# sourceMappingURL=component---src-pages-docs-customization-js-16b189a75475751538ba.js.map