(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{EHmM:function(e,n,a){"use strict";a.r(n);var t=a("q1tI"),r=a.n(t),o=a("72SN"),l=a.n(o),c=a("dgKS"),s=a("Kvkj"),d={months:["January","February","March","April","May","June","July","August","September","October","November","December"],weekDays:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],weekStartingIndex:0,getToday:function(e){return e},toNativeDate:function(e){return new Date(e.year,e.month-1,e.day)},getMonthLength:function(e){return new Date(e.year,e.month,0).getDate()},transformDigit:function(e){return e},nextMonth:"Next Month",previousMonth:"Previous Month",openMonthSelector:"Open Month Selector",openYearSelector:"Open Year Selector",closeMonthSelector:"Close Month Selector",closeYearSelector:"Close Year Selector",from:"from",to:"to",defaultPlaceholder:"Select...",digitSeparator:",",yearLetterSkip:0,isRtl:!1};n.default=function(){var e=Object(t.useState)(null),n=e[0],a=e[1],i=Object(t.useState)(null),u=i[0],m=i[1];return r.a.createElement(c.a,{title:"Different Locales"},r.a.createElement("p",null,"Turning this date picker into another locale date picker is as easy as changing the ",r.a.createElement("code",{className:"custom-code"},"locale")," prop. For other features like minimum and maximum dates, just use them as you would normally use:"),r.a.createElement("h2",{className:"Docs__titleSecondary"},"Using Predefined Locales"),r.a.createElement("p",null,"For now, there are two predefined locales;"," ",r.a.createElement("code",{className:"custom-code"},"en")," and"," ",r.a.createElement("code",{className:"custom-code"},"fa"),". You can use them by passing them to ",r.a.createElement("code",{className:"custom-code"},"locale")," prop as a string."),r.a.createElement("div",{className:"Docs__sampleContainer"},r.a.createElement(s.a,{language:"javascript"},'\nimport React, { useState } from "react";\nimport "react-modern-calendar-datepicker/lib/DatePicker.css";\nimport DatePicker from "react-modern-calendar-datepicker";\n\nconst App = () => {\n  const [selectedDay, setSelectedDay] = useState(null);\n  return (\n    <DatePicker\n      value={selectedDay}\n      onChange={setSelectedDay}\n      shouldHighlightWeekends\n      locale="fa" // add this\n    />\n  );\n};\n\nexport default App;\n\n          '),r.a.createElement(l.a,{calendarClassName:"responsive-calendar",wrapperClassName:"fontWrapper -persian",value:n,onChange:a,locale:"fa",shouldHighlightWeekends:!0})),r.a.createElement("div",{className:"Docs__sampleContainer"},r.a.createElement(s.a,{language:"javascript"},'\nimport React, { useState } from "react";\nimport "react-modern-calendar-datepicker/lib/DatePicker.css";\nimport { Calendar } from "react-modern-calendar-datepicker";\n\nconst App = () => {\n  const [selectedDay, setSelectedDay] = useState(null);\n  return (\n    <Calendar\n      value={selectedDay}\n      onChange={setSelectedDay}\n      shouldHighlightWeekends\n      locale="fa" // add this\n    />\n  );\n};\n\nexport default App;\n\n                '),r.a.createElement(o.Calendar,{calendarClassName:"fontWrapper -persian responsive-calendar",value:u,onChange:m,locale:"fa",shouldHighlightWeekends:!0})),r.a.createElement("h2",{className:"Docs__titleSecondary"},"Using Custom Locales"),r.a.createElement("p",null,"If your locale is missing in predefined locales, you can add your own custom locale by passing a locale object to"," ",r.a.createElement("code",{className:"custom-code"},"locale")," prop. This is an example of default English picker's data:"),r.a.createElement("div",{className:"Docs__sampleContainer"},r.a.createElement(s.a,{language:"javascript"},"\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport { Calendar } from \"react-modern-calendar-datepicker\";\n\nconst myCustomLocale = {\n  // months list by order\n  months: [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n  ],\n\n  // week days by order\n  weekDays: [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ],\n\n  // just play around with this number between 0 and 6\n  weekStartingIndex: 0,\n\n  // return a { year: number, month: number, day: number } object\n  getToday(gregorainTodayObject) {\n    return gregorainTodayObject;\n  },\n\n  // return a native JavaScript date here\n  toNativeDate(date) {\n    return new Date(date.year, date.month - 1, date.day);\n  },\n\n  // return a number for date's month length\n  getMonthLength(date) {\n    return new Date(date.year, date.month, 0).getDate();\n  },\n\n  // return a transformed digit to your locale\n  transformDigit(digit) {\n    return digit;\n  },\n\n  // texts in the date picker\n  nextMonth: 'Next Month',\n  previousMonth: 'Previous Month',\n  openMonthSelector: 'Open Month Selector',\n  openYearSelector: 'Open Year Selector',\n  closeMonthSelector: 'Close Month Selector',\n  closeYearSelector: 'Close Year Selector',\n  defaultPlaceholder: 'Select...',\n\n  // for input range value\n  from: 'from',\n  to: 'to',\n\n\n  // used for input value when multi dates are selected\n  digitSeparator: ',',\n\n  // if your provide -2 for example, year will be 2 digited\n  yearLetterSkip: 0,\n\n  // is your language rtl or ltr?\n  isRtl: false,\n}\n\nconst App = () => {\n  const [selectedDay, setSelectedDay] = useState(null);\n  return (\n    <Calendar\n      value={selectedDay}\n      onChange={setSelectedDay}\n      locale={myCustomLocale} // custom locale object\n      shouldHighlightWeekends\n    />\n  );\n};\n\nexport default App;\n\n                      "),r.a.createElement(o.Calendar,{calendarClassName:"responsive-calendar",value:u,onChange:m,locale:d,shouldHighlightWeekends:!0})))}}}]);
//# sourceMappingURL=component---src-pages-docs-different-locales-js-1c0c9e290606883ec0fc.js.map