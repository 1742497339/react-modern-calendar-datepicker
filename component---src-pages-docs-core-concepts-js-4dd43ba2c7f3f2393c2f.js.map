{"version":3,"sources":["webpack:///./src/pages/docs/core-concepts.js"],"names":["CoreConcepts","useState","datePicker1Value","setDatePicker1Value","datePicker2Value","setDatePicker2Value","from","to","datePicker3Value","setDatePicker3Value","datePicker4Value","setDatePicker4Value","datePicker5Value","setDatePicker5Value","title","className","rel","target","href","language","wrapperClassName","calendarClassName","value","inputPlaceholder","onChange","shouldHighlightWeekends"],"mappings":"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","file":"component---src-pages-docs-core-concepts-js-4dd43ba2c7f3f2393c2f.js","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'gatsby';\nimport DatePicker, { Calendar } from 'react-modern-calendar-datepicker';\n\nimport Docs from '../../containers/docs';\nimport { Code } from '../../components';\n\nconst CoreConcepts = () => {\n  const [datePicker1Value, setDatePicker1Value] = useState(null);\n  const [datePicker2Value, setDatePicker2Value] = useState(null);\n  const [datePicker3Value, setDatePicker3Value] = useState({ from: null, to: null });\n  const [datePicker4Value, setDatePicker4Value] = useState({ from: null, to: null });\n  const [datePicker5Value, setDatePicker5Value] = useState([]);\n\n  return (\n    <Docs title=\"Core Concepts\">\n      <p>\n        Now that you&#39;ve installed the package. It&#39;s the time to get familiarized with\n        the core concepts of react-modern-calendar-datepicker. In a\n        nutshell, there are two major components available\n        to import:\n      </p>\n\n      <ul className=\"Docs__list\">\n        <li>1- <code className=\"custom-code\">{`<DatePicker />`}</code> default-exported component which includes an input and a calendar.</li>\n        <li>2- <code className=\"custom-code\">{`<Calendar />`}</code> component which is the calendar itself.</li>\n      </ul>\n\n      <p>\n        These components are similar in many cases. <code className=\"custom-code\">{`<DatePicker />`}</code> just\n        includes an extra input in comparison with <code className=\"custom-code\">{`<Calendar />`}</code>. The simple\n        rule is:\n      </p>\n\n      <p className=\"-marginTop -marginBottom\">\n        <strong> You can use almost every prop\n          on both <code className=\"custom-code\">{`<DatePicker />`}</code> and <code className=\"custom-code\"> {`<Calendar />`}</code> components.</strong>\n      </p>\n\n      <p className=\"-marginTop -marginBottom\">\n        <strong> Note: </strong> To turn this calendar into a another language locale one, <Link className=\"Docs__link\" to=\"/docs/different-locales\"> add this prop</Link>.\n      </p>\n\n      <p>\n        By the way, all the examples provided in this document are implemented using <a rel=\"noopener noreferrer\" target=\"_blank\" className=\"Docs__link\" href=\" https://reactjs.org/docs/hooks-intro.html\"> React hooks </a>.\n      </p>\n\n      <h2 className=\"Docs__titleSecondary\">Basic Usage</h2>\n\n      <p>\n        Let&#39;s kick things off by providing an example:\n      </p>\n\n      <div className=\"Docs__sampleContainer\">\n        <Code language=\"javascript\">\n          {`\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport DatePicker from \"react-modern-calendar-datepicker\";\n\nconst App = () => {\n  const [selectedDay, setSelectedDay] = useState(null);\n  return (\n    <DatePicker\n      value={selectedDay}\n      onChange={setSelectedDay}\n      inputPlaceholder=\"Select a day\"\n      shouldHighlightWeekends\n    />\n  );\n};\n\nexport default App;\n\n          `}\n        </Code>\n        <DatePicker\n          wrapperClassName=\"fontWrapper -aboveAll\"\n          calendarClassName=\"fontWrapper\"\n          value={datePicker1Value}\n          inputPlaceholder=\"Select a day\"\n          onChange={setDatePicker1Value}\n          shouldHighlightWeekends\n        />\n      </div>\n\n      <p>\n        Without the input:\n      </p>\n\n      <div className=\"Docs__sampleContainer\">\n              <Code language=\"javascript\">\n                {`\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport { Calendar } from \"react-modern-calendar-datepicker\";\n\nconst App = () => {\n  const [selectedDay, setSelectedDay] = useState(null);\n  return (\n    <Calendar\n      value={selectedDay}\n      onChange={setSelectedDay}\n      shouldHighlightWeekends\n    />\n  );\n};\n\nexport default App;\n\n                `}\n              </Code>\n              <Calendar\n                calendarClassName=\"fontWrapper\"\n                value={datePicker2Value}\n                onChange={setDatePicker2Value}\n                shouldHighlightWeekends\n              />\n            </div>\n\n      <p>\n       - <code className=\"custom-code\">value</code> prop\n        is the value of the date picker and <strong>the shape of its initial value, defines the date picker type(single, range, multiple)</strong>\n      </p>\n      <p>\n      -<code className=\"custom-code\">onChange</code> is\n      the function which\n      will take care of changing the state using the state hook modifier. All day formats\n      in the picker are like:\n      </p>\n\n      <Code language=\"javascript\">\n              {`\nPropTypes.shape({\n  year: PropTypes.number.isRequired,\n  month: PropTypes.number.isRequired,\n  day: PropTypes.number.isRequired,\n})\n              `}\n            </Code>\n\n      <p>\n        For a more detailed list of props,\n        visit <Link to=\"/docs/props-list\" className=\"Docs__link\">props list</Link>.\n      </p>\n\n      <h2 className=\"Docs__titleSecondary\">Selecting a Day Range</h2>\n      <p>\n        To turn out the picker into a range picker, you need to\n        change the initial <code className=\"custom-code\">value</code>. Here&#39;s an example:\n      </p>\n\n      <div className=\"Docs__sampleContainer\">\n        <Code language=\"javascript\">\n          {`\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport { Calendar } from \"react-modern-calendar-datepicker\";\n\nconst App = () => {\n  // âœ… a change in default state: { from: ..., to: ... }\n  const [selectedDayRange, setSelectedDayRange] = useState({\n    from: null,\n    to: null\n  });\n  return (\n    <Calendar\n      value={selectedDayRange}\n      onChange={setSelectedDayRange}\n      shouldHighlightWeekends\n    />\n  );\n};\n\nexport default App;\n\n          `}\n        </Code>\n        <Calendar\n          calendarClassName=\"fontWrapper\"\n          value={datePicker3Value}\n          onChange={setDatePicker3Value}\n          shouldHighlightWeekends\n        />\n      </div>\n\n      <p>\n        We&#39;ve used <code className=\"custom-code\">from</code> on the default state to indicate\n        the starting point of the day range, and <code className=\"custom-code\">to</code> for\n        the ending point of the day range. Note that you can\n        replace <code className=\"custom-code\">{`<Calendar />`}</code> with\n        <code className=\"custom-code\">{`<DatePicker />`}</code> to have the input along with the calendar:\n      </p>\n\n      <div className=\"Docs__sampleContainer\">\n        <Code language=\"javascript\">\n          {`\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport DatePicker from \"react-modern-calendar-datepicker\";\n\nconst App = () => {\n  const [selectedDayRange, setSelectedDayRange] = useState({\n    from: null,\n    to: null\n  });\n  return (\n    <DatePicker\n      value={selectedDayRange}\n      onChange={setSelectedDayRange}\n      inputPlaceholder=\"Select a day range\"\n      shouldHighlightWeekends\n    />\n  );\n};\n\nexport default App;\n\n          `}\n        </Code>\n        <DatePicker\n          wrapperClassName=\"fontWrapper -aboveAll\"\n          calendarClassName=\"fontWrapper\"\n          value={datePicker4Value}\n          onChange={setDatePicker4Value}\n          inputPlaceholder=\"Select a day range\"\n          shouldHighlightWeekends\n        />\n      </div>\n      <h2 className=\"Docs__titleSecondary\">Selecting Multiple Dates</h2>\n      <p>You pass a <code className=\"custom-code\">[]</code> as a default value, it becomes a multiple date selector.</p>\n      <div className=\"Docs__sampleContainer\">\n              <Code language=\"javascript\">\n                {`\n      import React, { useState } from \"react\";\n      import \"react-modern-calendar-datepicker/lib/DatePicker.css\";\n      import { Calendar } from \"react-modern-calendar-datepicker\";\n\n      const App = () => {\n        // âœ… a change in default state: []\n        const [selectedDays, setSelectedDays] = useState([]);\n        return (\n          <Calendar\n            value={selectedDays}\n            onChange={setSelectedDays}\n            shouldHighlightWeekends\n          />\n        );\n      };\n\n      export default App;\n\n                `}\n              </Code>\n              <Calendar\n                calendarClassName=\"fontWrapper\"\n                value={datePicker5Value}\n                onChange={setDatePicker5Value}\n                shouldHighlightWeekends\n              />\n            </div>\n      <p>Simple as that! as mentioned above, the shape of <code className=\"custom-code\">value</code> prop defines the date picker type. Here\n       we passed an empty array.</p>\n      <h2 className=\"Docs__titleSecondary\">Recap</h2>\n      <p>\n        So far so good. By now, you should feel pretty comfortable with this picker. In this\n        part, you used <code className=\"custom-code\">null</code> as the default value for the single date\n        picker, <code className=\"custom-code\">{`{ from: null, to: null }`}</code> as the default\n        value for the range date picker, and <code className=\"custom-code\">[]</code> as the default\n        value for the mutliple date picker. In the next part, you&#39;ll learn more\n        about <Link className=\"Docs__link\" to=\"/docs/default-values\">default values</Link>.\n      </p>\n    </Docs>\n  );\n};\n\nexport default CoreConcepts;\n"],"sourceRoot":""}