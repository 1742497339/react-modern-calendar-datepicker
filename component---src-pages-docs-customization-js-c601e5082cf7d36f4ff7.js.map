{"version":3,"sources":["webpack:///./src/utils.js","webpack:///./src/pages/docs/customization.js"],"names":["getRandomMonthDate","randomNumber","Math","floor","random","today","utils","getToday","dayNumber","day","DisabledDays","useState","datePicker1Value","setDatePicker1Value","datePicker2Value","setDatePicker2Value","from","year","month","to","datePicker3Value","setDatePicker3Value","randomDate","randomDate2","datePicker4Value","setDatePicker4Value","datePicker5Value","setDatePicker5Value","datePicker6Value","setDatePicker6Value","title","className","language","wrapperClassName","calendarClassName","value","onChange","inputPlaceholder","formatInputText","shouldHighlightWeekends","renderInput","ref","readOnly","placeholder","style","textAlign","padding","fontSize","border","borderRadius","boxShadow","color","outline","colorPrimary","colorPrimaryLight","calendarTodayClassName","rel","target","href","customDaysClassName","renderFooter","display","justifyContent","type","onClick","background"],"mappings":"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","file":"component---src-pages-docs-customization-js-c601e5082cf7d36f4ff7.js","sourcesContent":["import { utils } from 'react-modern-calendar-datepicker';\n\nexport const getRandomMonthDate = () => {\n  const randomNumber = Math.floor(Math.random() * 10) + 9; // random num between 9 and 18\n  const today = utils().getToday();\n  const shouldChangeNumber =\n    randomNumber === today.day || randomNumber === today.day + 1;\n  const dayNumber = shouldChangeNumber ? today.day + 2 : randomNumber;\n  return {\n    ...today,\n    day: dayNumber,\n  };\n};\n","import React, { useState } from 'react';\nimport { Link } from 'gatsby';\nimport DatePicker, { Calendar } from 'react-modern-calendar-datepicker';\n\nimport Docs from '../../containers/docs';\nimport { Code } from '../../components';\n\nimport { getRandomMonthDate } from '../../utils';\n\nconst DisabledDays = () => {\n  const [datePicker1Value, setDatePicker1Value] = useState(null);\n  const [datePicker2Value, setDatePicker2Value] = useState(null);\n  const [datePicker3Value, setDatePicker3Value] = useState({\n    from: {\n      year: 2019,\n      month: 4,\n      day: 16,\n    },\n    to: {\n      year: 2019,\n      month: 4,\n      day: 19,\n    },\n  });\n  const randomDate = getRandomMonthDate();\n  const randomDate2 = getRandomMonthDate();\n  const [datePicker4Value, setDatePicker4Value] = useState(randomDate);\n  const [datePicker5Value, setDatePicker5Value] = useState(randomDate2);\n  const [datePicker6Value, setDatePicker6Value] = useState({\n    year: 2019,\n    month: 3,\n    day: 1,\n  });\n\n  return (\n    <Docs title=\"Customization\">\n      <p>\n        This package is designed to be customizable. There are a couple of props\n        to change the default styles according to your preferences. You can\n        customize picker, calendar, and input. For the full list of available\n        props, you can visit{' '}\n        <Link className=\"Docs__link\" to=\"/docs/props-list\">\n          props list\n        </Link>\n        .\n      </p>\n\n      <h2 className=\"Docs__titleSecondary\">Customized Input</h2>\n\n      <p>\n        Placeholder and the formatted value of input can be set directly by you.\n        Moreover, you can set an additional class on the input. If that&#39;s\n        not enough, you can render your own input as well. Let&#39;s take a look\n        at a few examples:\n      </p>\n\n      <div className=\"Docs__sampleContainer\">\n        <Code language=\"javascript\">\n          {`\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport DatePicker from \"react-modern-calendar-datepicker\";\n\nconst App = () => {\n  const [selectedDay, setSelectedDay] = useState(null);\n\n  const formatInputValue = () => {\n    if (!selectedDay) return '';\n    return \\`Day: \\${selectedDay.day}\\`;\n  };\n\n  return (\n    <DatePicker\n      value={selectedDay}\n      onChange={setSelectedDay}\n      inputPlaceholder=\"Select a date\" // placeholder\n      formatInputText={formatInputValue} // format value\n      inputClassName=\"my-custom-input\" // custom class\n      shouldHighlightWeekends\n    />\n  );\n};\n\nexport default App;\n\n          `}\n        </Code>\n\n        <DatePicker\n          wrapperClassName=\"fontWrapper -aboveAll\"\n          calendarClassName=\"fontWrapper\"\n          value={datePicker1Value}\n          onChange={setDatePicker1Value}\n          inputPlaceholder=\"Select a date\"\n          formatInputText={() => {\n            if (!datePicker1Value) return '';\n            return `Day: ${datePicker1Value.day}`;\n          }}\n          shouldHighlightWeekends\n        />\n      </div>\n\n      <p>\n        You can render your own custom input using{' '}\n        <code className=\"custom-code\">renderInput</code> prop:\n      </p>\n\n      <div className=\"Docs__sampleContainer\">\n        <Code language=\"javascript\">\n          {`\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport DatePicker from \"react-modern-calendar-datepicker\";\n\nconst App = () => {\n  const [selectedDay, setSelectedDay] = useState(null);\n\n  // render regular HTML input element\n  const renderCustomInput = ({ ref }) => (\n    <input\n      readOnly\n      ref={ref} // necessary\n      placeholder=\"I'm a custom input\"\n      value={selectedDay ? \\`✅: \\${selectedDay.day}\\` : ''}\n      style={{\n        textAlign: 'center',\n        padding: '1rem 1.5rem',\n        fontSize: '1.5rem',\n        border: '1px solid #9c88ff',\n        borderRadius: '100px',\n        boxShadow: '0 1.5rem 2rem rgba(156, 136, 255, 0.2)',\n        color: '#9c88ff',\n        outline: 'none',\n      }}\n      className=\"my-custom-input-class\" // a styling class\n    />\n  )\n\n  return (\n    <DatePicker\n      value={selectedDay}\n      onChange={setSelectedDay}\n      renderInput={renderCustomInput} // render a custom input\n      shouldHighlightWeekends\n    />\n  );\n};\n\nexport default App;\n\n          `}\n        </Code>\n\n        <DatePicker\n          wrapperClassName=\"fontWrapper -aboveAll\"\n          calendarClassName=\"fontWrapper\"\n          value={datePicker2Value}\n          onChange={setDatePicker2Value}\n          shouldHighlightWeekends\n          renderInput={({ ref }) => (\n            <input\n              readOnly\n              ref={ref}\n              placeholder=\"I'm a custom input\"\n              className=\"-customPlaceholderColor\"\n              value={datePicker2Value ? `✅: ${datePicker2Value.day}` : ''}\n              style={{\n                textAlign: 'center',\n                padding: '1rem 1.5rem',\n                fontSize: '1.5rem',\n                border: '1px solid #9c88ff',\n                borderRadius: '100px',\n                boxShadow: '0 1.5rem 2rem rgba(156, 136, 255, 0.2)',\n                color: '#9c88ff',\n                outline: 'none',\n              }}\n            />\n          )}\n        />\n      </div>\n\n      <h2 className=\"Docs__titleSecondary\">Customized Calendar</h2>\n\n      <p>\n        The calendar has a few more props for customization. The most basic ones\n        are <code className=\"custom-code\">colorPrimary</code>,{' '}\n        <code className=\"custom-code\">colorPrimaryLight</code>. Additional\n        classes&#39; props are available for the calendar itself, selected day,\n        disabled days, range start day, range end day, and more. Here are some\n        examples:\n      </p>\n\n      <div className=\"Docs__sampleContainer\">\n        <Code language=\"javascript\">\n          {`\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport { Calendar } from \"react-modern-calendar-datepicker\";\n\nconst App = () => {\n  const defaultFrom = {\n    year: 2019,\n    month: 4,\n    day: 16,\n  };\n  const defaultTo = {\n    year: 2019,\n    month: 4,\n    day: 19,\n  };\n  const defaultValue = {\n    from: defaultFrom,\n    to: defaultTo,\n  };\n  const [selectedDayRange, setSelectedDayRange] = useState(\n    defaultValue\n  );\n\n  return (\n    <Calendar\n      value={selectedDayRange}\n      onChange={setSelectedDayRange}\n      colorPrimary=\"#0fbcf9\" // added this\n      colorPrimaryLight=\"rgba(75, 207, 250, 0.4)\" // and this\n      shouldHighlightWeekends\n    />\n  );\n};\n\nexport default App;\n\n          `}\n        </Code>\n\n        <Calendar\n          calendarClassName=\"fontWrapper\"\n          value={datePicker3Value}\n          onChange={setDatePicker3Value}\n          colorPrimary=\"#0fbcf9\"\n          colorPrimaryLight=\"rgba(75, 207, 250, 0.4)\"\n          shouldHighlightWeekends\n        />\n      </div>\n\n      <div className=\"Docs__sampleContainer\">\n        <Code language=\"javascript\">\n          {`\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport { Calendar } from \"react-modern-calendar-datepicker\";\n\nconst App = () => {\n  const defaultValue = {\n    year: ${randomDate.year},\n    month: ${randomDate.month},\n    day: ${randomDate.day},\n  };\n  const [selectedDay, setSelectedDay] = useState(defaultValue);\n\n  return (\n    <Calendar\n      value={selectedDay}\n      onChange={setSelectedDay}\n      colorPrimary=\"#9c88ff\" // added this\n      calendarClassName=\"custom-calendar\" // and this\n      calendarTodayClassName=\"custom-today-day\" // also this\n      shouldHighlightWeekends\n    />\n  );\n};\n\nexport default App;\n\n          `}\n        </Code>\n\n        <Calendar\n          calendarClassName=\"fontWrapper purple-shadow\"\n          value={datePicker4Value}\n          onChange={setDatePicker4Value}\n          colorPrimary=\"#9c88ff\"\n          calendarTodayClassName=\"text-orange\"\n          shouldHighlightWeekends\n        />\n      </div>\n\n      <p>Our CSS code for the above example is:</p>\n\n      <Code language=\"css\">\n        {`\n.custom-calendar {\n  box-shadow: 0 1em 3em rgba(156, 136, 255,0.2);\n}\n\n.custom-today-day {\n  color: #e67e22 !important;\n  border: 1px solid #e67e22 !important;\n}\n\n.custom-today-day::after {\n  visibility: hidden; /* hide small border under the text */\n}\n        `}\n      </Code>\n\n      <p>\n        <strong>Note:</strong> the usage of{' '}\n        <code className=\"custom-code\">!important</code> is because of{' '}\n        <a\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          className=\"Docs__link\"\n          href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity\"\n        >\n          overriding the default styles\n        </a>\n        .\n      </p>\n\n      <h2 className=\"Docs__titleSecondary\">Customized Array of Days</h2>\n      <p>\n        If any of the above customizable options for days is not enough for you,\n        you can provide an array for some days to have a certain CSS class:\n      </p>\n\n<div className=\"Docs__sampleContainer\">\n        <Code language=\"javascript\">\n          {`\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport { Calendar } from \"react-modern-calendar-datepicker\";\n\nconst App = () => {\n  const defaultValue = {\n    year: 2019,\n    month: 3,\n    day: 1,\n  };\n  const [selectedDay, setSelectedDay] = useState(defaultValue);\n\n  return (\n    <Calendar\n      value={selectedDay}\n      onChange={setSelectedDay}\n      shouldHighlightWeekends\n      customDaysClassName={[\n        // here we add some CSS classes\n        { year: 2019, month: 3, day: 4, className: 'purpleDay' },\n        { year: 2019, month: 3, day: 12, className: 'orangeDay' },\n        { year: 2019, month: 3, day: 18, className: 'yellowDay' },\n        { year: 2019, month: 3, day: 26, className: 'navyBlueDay' },\n      ]}\n    />\n  );\n};\n\nexport default App;\n\n          `}\n        </Code>\n\n        <Calendar\n          calendarClassName=\"fontWrapper\"\n          value={datePicker6Value}\n          onChange={setDatePicker6Value}\n          shouldHighlightWeekends\n          customDaysClassName={[\n            { year: 2019, month: 3, day: 4, className: 'purpleDay' },\n            { year: 2019, month: 3, day: 12, className: 'orangeDay' },\n            { year: 2019, month: 3, day: 18, className: 'yellowDay' },\n            { year: 2019, month: 3, day: 26, className: 'navyBlueDay' },\n          ]}\n        />\n      </div>\n\n      <p>Our CSS code for the above example is:</p>\n\n      <Code language=\"css\">\n        {`\n/*\n  These :not() selectors are for preventing\n  style conflicts with a selected date. You can remove them if you wish!\n*/\n\n.purpleDay:not(.-selectedStart):not(.-selectedBetween):not(.-selectedEnd):not(.-selected) {\n  border: 2px solid rgba(156, 136, 255, 0.7) !important;\n}\n\n.orangeDay:not(.-selectedStart):not(.-selectedBetween):not(.-selectedEnd):not(.-selected) {\n  border: 2px solid rgba(219, 145, 60, 0.7) !important;\n}\n\n.yellowDay:not(.-selectedStart):not(.-selectedBetween):not(.-selectedEnd):not(.-selected) {\n  border: 2px solid rgba(228, 231, 36, 0.7) !important;\n}\n\n.navyBlueDay:not(.-selectedStart):not(.-selectedBetween):not(.-selectedEnd):not(.-selected) {\n  border: 2px solid rgba(52, 73, 94, 0.7) !important;\n}\n        `}\n      </Code>\n\n      <h2 className=\"Docs__titleSecondary\">Calendar Footer</h2>\n\n      <p>\n        You can render a custom footer in the calendar below the days list by{' '}\n        <code className=\"custom-code\">renderFooter</code> prop. This can be\n        useful for rendering a button for selecting today or reseting the value.\n        This is an example:\n      </p>\n\n      <div className=\"Docs__sampleContainer\">\n        <Code language=\"javascript\">\n          {`\nimport React, { useState } from \"react\";\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport { Calendar } from \"react-modern-calendar-datepicker\";\n\nconst App = () => {\n  const defaultValue = {\n    year: ${randomDate2.year},\n    month: ${randomDate2.month},\n    day: ${randomDate2.day},\n  };\n  const [selectedDay, setSelectedDay] = useState(defaultValue);\n\n  return (\n    <Calendar\n      value={selectedDay}\n      onChange={setSelectedDay}\n      shouldHighlightWeekends\n      // here we go\n      renderFooter={() => (\n        <div style={{ display: 'flex', justifyContent: 'center', padding: '1rem 2rem' }}>\n          <button\n            type=\"button\"\n            onClick={() => {\n              setSelectedDay(null)\n            }}\n            style={{\n              border: '#0fbcf9',\n              color: '#fff',\n              borderRadius: '0.5rem',\n              padding: '1rem 2rem',\n            }}\n          >\n            Reset Value!\n          </button>\n        </div>\n      )}\n    />\n  );\n};\n\nexport default App;\n\n          `}\n        </Code>\n\n        <Calendar\n          calendarClassName=\"fontWrapper\"\n          value={datePicker5Value}\n          onChange={setDatePicker5Value}\n          shouldHighlightWeekends\n          renderFooter={() => (\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                padding: '1rem 2rem',\n              }}\n            >\n              <button\n                type=\"button\"\n                onClick={() => {\n                  setDatePicker5Value(null);\n                }}\n                style={{\n                  background: '#0fbcf9',\n                  color: '#fff',\n                  borderRadius: '0.5rem',\n                  padding: '1rem 2rem',\n                }}\n              >\n                Reset Value!\n              </button>\n            </div>\n          )}\n        />\n      </div>\n\n      <h2 className=\"Docs__titleSecondary\">Customized Wrapper</h2>\n\n      <p>\n        All the calendar custom styling props can be passed from{' '}\n        <code className=\"custom-code\">{`<DatePicker />`}</code>. Furthermore,\n        there&#39;s a<code className=\"custom-code\">wrapperClassName</code> prop\n        for the customization of the picker&#39;s container element itself.\n      </p>\n    </Docs>\n  );\n};\n\nexport default DisabledDays;\n"],"sourceRoot":""}